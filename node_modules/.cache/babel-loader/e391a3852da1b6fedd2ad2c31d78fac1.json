{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $488c6ddbf4ef74c2$var$formatterCache = new Map();\nvar $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {\n    signDisplay: 'exceptZero'\n  }).resolvedOptions().signDisplay === 'exceptZero'; // eslint-disable-next-line no-empty\n} catch (e) {}\n\nvar $488c6ddbf4ef74c2$var$supportsUnit = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {\n    style: 'unit',\n    unit: 'degree'\n  }).resolvedOptions().style === 'unit'; // eslint-disable-next-line no-empty\n} catch (e1) {} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\n\n\nvar $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n    }\n  }\n};\n\nvar $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = /*#__PURE__*/function () {\n  function $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5);\n\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  _createClass($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5, [{\n    key: \"format\",\n    value:\n    /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n    function format(value) {\n      var res = '';\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n\n      if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n        var ref;\n\n        var _this$resolvedOptions = this.resolvedOptions(),\n            unit = _this$resolvedOptions.unit,\n            _this$resolvedOptions2 = _this$resolvedOptions.unitDisplay,\n            unitDisplay = _this$resolvedOptions2 === void 0 ? 'short' : _this$resolvedOptions2,\n            locale = _this$resolvedOptions.locale;\n\n        var values = (ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];\n        res += values[locale] || values.default;\n      }\n\n      return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      // TODO: implement signDisplay for formatToParts\n      // @ts-ignore\n      return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */\n\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRange === 'function') // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n      if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.\n\n      return \"\".concat(this.format(start), \" \\u2013 \").concat(this.format(end));\n    }\n    /** Formats a number range as an array of parts. */\n\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.numberFormatter.formatRangeToParts === 'function') // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError('End date must be >= start date');\n      var startParts = this.numberFormatter.formatToParts(start);\n      var endParts = this.numberFormatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: 'startRange'\n        });\n      })), [{\n        type: 'literal',\n        value: ' – ',\n        source: 'shared'\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: 'endRange'\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var options = this.numberFormatter.resolvedOptions();\n      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = _objectSpread(_objectSpread({}, options), {}, {\n        signDisplay: this.options.signDisplay\n      });\n      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = _objectSpread(_objectSpread({}, options), {}, {\n        style: 'unit',\n        unit: this.options.unit,\n        unitDisplay: this.options.unitDisplay\n      });\n      return options;\n    }\n  }]);\n\n  return $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5;\n}();\n\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options = options,\n      numberingSystem = _options.numberingSystem;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) locale = \"\".concat(locale, \"-u-nu-\").concat(numberingSystem);\n\n  if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var ref;\n    var _options2 = options,\n        unit = _options2.unit,\n        _options2$unitDisplay = _options2.unitDisplay,\n        unitDisplay = _options2$unitDisplay === void 0 ? 'short' : _options2$unitDisplay;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay])) throw new Error(\"Unsupported unit \".concat(unit, \" with unitDisplay = \").concat(unitDisplay));\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      style: 'decimal'\n    });\n  }\n\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : '');\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === 'auto') return numberFormat.format(num);else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));else {\n    var needsPositiveSign = false;\n    if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n\n    if (needsPositiveSign) {\n      var negative = numberFormat.format(-num);\n      var noSign = numberFormat.format(num); // ignore RTL/LTR marker character\n\n      var minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if (_toConsumableArray(minus).length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      var positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n\nvar $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nvar $6c7bd7858deea686$var$NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\nvar $6c7bd7858deea686$export$cd11ab140839f11d = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$export$cd11ab140839f11d(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $6c7bd7858deea686$export$cd11ab140839f11d);\n\n    this.locale = locale;\n    this.options = options;\n  }\n\n  _createClass($6c7bd7858deea686$export$cd11ab140839f11d, [{\n    key: \"parse\",\n    value:\n    /**\n    * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n    */\n    function parse(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n    * Returns whether the given string could potentially be a valid number. This should be used to\n    * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n    * of the minus/plus sign characters can be checked.\n    */\n\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value, minValue, maxValue) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n    * Returns a numbering system for which the given string is valid in the current locale.\n    * If no numbering system could be detected, the default numbering system for the current\n    * locale is returned.\n    */\n\n  }, {\n    key: \"getNumberingSystem\",\n    value: function getNumberingSystem(value) {\n      return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n  }]);\n\n  return $6c7bd7858deea686$export$cd11ab140839f11d;\n}();\n\nvar $6c7bd7858deea686$var$numberParserCache = new Map();\n\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  var defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options); // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    var _iterator = _createForOfIteratorHelper($6c7bd7858deea686$var$NUMBERING_SYSTEMS),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var numberingSystem = _step.value;\n\n        if (numberingSystem !== defaultParser.options.numberingSystem) {\n          var parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n          if (parser.isValidPartialNumber(value)) return parser;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : '');\n  var parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n} // The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\n\n\nvar $6c7bd7858deea686$var$NumberParserImpl = /*#__PURE__*/function () {\n  function $6c7bd7858deea686$var$NumberParserImpl(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, $6c7bd7858deea686$var$NumberParserImpl);\n\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n\n  _createClass($6c7bd7858deea686$var$NumberParserImpl, [{\n    key: \"parse\",\n    value: function parse(value) {\n      // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n      var fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.\n\n      fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '').replace(this.symbols.decimal, '.').replace(this.symbols.minusSign, '-').replace(this.symbols.numeral, this.symbols.index);\n      var newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n      if (isNaN(newValue)) return NaN; // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n\n      if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue; // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n\n      if (this.options.style === 'percent') {\n        newValue /= 100;\n\n        var _maximumFractionDigits; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n\n\n        newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);\n      }\n\n      return newValue;\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(value) {\n      // Remove literals and whitespace, which are allowed anywhere in the string\n      value = value.replace(this.symbols.literals, ''); // Replace the ASCII minus sign with the minus sign used in the current locale\n      // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n\n      value = value.replace('-', this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n      // instead they use the , (44) character or apparently the (1548) character.\n\n      if (this.options.numberingSystem === 'arab') {\n        value = value.replace(',', this.symbols.decimal);\n        value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n        value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);\n      } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n      // so allow 'period' as a group char and replace it with a space\n\n\n      if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));\n      return value;\n    }\n  }, {\n    key: \"isValidPartialNumber\",\n    value: function isValidPartialNumber(value) {\n      var minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n      var maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n      value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.\n\n      if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length); // Numbers cannot start with a group separator\n\n      if (value.startsWith(this.symbols.group)) return false; // Remove numerals, groups, and decimals\n\n      value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '').replace(this.symbols.numeral, '').replace(this.symbols.decimal, ''); // The number is valid if there are no remaining characters\n\n      return value.length === 0;\n    }\n  }]);\n\n  return $6c7bd7858deea686$var$NumberParserImpl;\n}();\n\nvar $6c7bd7858deea686$var$nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var ref, ref1, ref2, ref3; // Note: some locale's don't add a group symbol until there is a ten thousands place\n\n  var allParts = formatter.formatToParts(-10000.111);\n  var posAllParts = formatter.formatToParts(10000.111);\n  var singularParts = formatter.formatToParts(1);\n  var ref4;\n  var minusSign = (ref4 = (ref = allParts.find(function (p) {\n    return p.type === 'minusSign';\n  })) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : '-';\n  var plusSign = (ref1 = posAllParts.find(function (p) {\n    return p.type === 'plusSign';\n  })) === null || ref1 === void 0 ? void 0 : ref1.value; // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';\n  var decimal = (ref2 = allParts.find(function (p) {\n    return p.type === 'decimal';\n  })) === null || ref2 === void 0 ? void 0 : ref2.value;\n  var group = (ref3 = allParts.find(function (p) {\n    return p.type === 'group';\n  })) === null || ref3 === void 0 ? void 0 : ref3.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n\n  var pluralLiterals = allParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n  var singularLiterals = singularParts.filter(function (p) {\n    return !$6c7bd7858deea686$var$nonLiteralParts.has(p.type);\n  }).map(function (p) {\n    return $6c7bd7858deea686$var$escapeRegex(p.value);\n  });\n\n  var sortedLiterals = _toConsumableArray(new Set([].concat(_toConsumableArray(singularLiterals), _toConsumableArray(pluralLiterals)))).sort(function (a, b) {\n    return b.length - a.length;\n  });\n\n  var literals = new RegExp(\"\".concat(sortedLiterals.join('|'), \"|[\\\\p{White_Space}]\"), 'gu'); // These are for replacing non-latn characters with the latn equivalent\n\n  var numerals = _toConsumableArray(new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)).reverse();\n\n  var indexes = new Map(numerals.map(function (d, i) {\n    return [d, i];\n  }));\n  var numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n\n  var index = function index(d) {\n    return String(indexes.get(d));\n  };\n\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\n\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\n\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"sources":["packages/@internationalized/number/src/NumberFormatter.ts","packages/@internationalized/number/src/NumberParser.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;AAAA;AAYA,IAAI,oCAAc,GAAG,IAAI,GAAJ,EAArB;AAEA,IAAI,yCAAmB,GAAG,KAA1B;;AACA,IAAI;EACF;EACA,yCAAmB,GAAI,IAAI,IAAI,CAAC,YAAT,CAAsB,OAAtB,EAA+B;IAAC,WAAW,EAAE;EAAd,CAA/B,EAA6D,eAA7D,GAA+E,WAA/E,KAA+F,YAAtH,CAFE,CAGF;AACD,CAJD,CAIE,OAAO,CAAP,EAAU,CAAE;;AAEd,IAAI,kCAAY,GAAG,KAAnB;;AACA,IAAI;EACF;EACA,kCAAY,GAAI,IAAI,IAAI,CAAC,YAAT,CAAsB,OAAtB,EAA+B;IAAC,KAAK,EAAE,MAAR;IAAgB,IAAI,EAAE;EAAtB,CAA/B,EAAiE,eAAjE,GAAmF,KAAnF,KAA6F,MAA7G,CAFE,CAGF;AACD,CAJD,CAIE,OAAO,EAAP,EAAU,CAAE,C,CAEd;AACA;AACA;;;AACA,IAAM,2BAAK,GAAG;EACZ,MAAM,EAAE;IACN,MAAM,EAAE;MACN,OAAO,EAAE,GADH;MAEL,SAAQ,IAFH;MAGJ,SAAO,GAHH;MAIJ,SAAO;IAJH;EADF;AADI,CAAd;;IAyBa,yC;qDAIC,M,EAAmD;IAAA,IAAnC,OAAmC,uEAAJ,EAAI;;IAAA;;IAC7D,KAAK,eAAL,GAAuB,8CAAwB,CAAC,MAAD,EAAS,OAAT,CAA/C;IACA,KAAK,OAAL,GAAe,OAAf;EACD;;;;;IAED;IACA,gBAAO,KAAP,EAA8B;MAC5B,IAAI,GAAG,GAAG,EAAV;MACA,IAAE,CAAG,yCAAH,IAA0B,KAAK,OAAL,CAAa,WAAb,IAA4B,IAAxD,EACE,GAAG,GAAG,yCAA+B,CAAC,KAAK,eAAN,EAAuB,KAAK,OAAL,CAAa,WAApC,EAAiD,KAAjD,CAArC,CADF,KAGE,GAAG,GAAG,KAAK,eAAL,CAAqB,MAArB,CAA4B,KAA5B,CAAN;;MAGF,IAAI,KAAK,OAAL,CAAa,KAAb,KAAuB,MAAvB,IAA6B,CAAK,kCAAtC,EAAoD;YAErC,G;;QADb,4BAA4C,KAAK,eAAL,EAA5C;QAAA,IAAK,IAAL,yBAAK,IAAL;QAAA,mDAAS,WAAT;QAAA,IAAW,WAAX,uCAAyB,OAAzB;QAAA,IAAkC,MAAlC,yBAAgC,MAAhC;;QACA,IAAI,MAAM,GAAA,CAAG,GAAW,GAAX,2BAAK,CAAC,IAAD,CAAR,MAAa,IAAb,IAAG,GAAW,KAAX,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,GAAW,CAAG,WAAH,CAAxB;QACA,GAAG,IAAI,MAAM,CAAC,MAAD,CAAN,IAAkB,MAAM,CAAC,OAAhC;MACD;;MAED,OAAO,GAAP;IACD;IAED;;;;WACA,uBAAc,KAAd,EAAsD;MACpD;MACA;MACA,OAAO,KAAK,eAAL,CAAqB,aAArB,CAAmC,KAAnC,CAAP;IACD;IAED;;;;WACA,qBAAY,KAAZ,EAA2B,GAA3B,EAAgD;MAC9C;MACA,IAAI,OAAO,KAAK,eAAL,CAAqB,WAA5B,KAA4C,UAAhD,EACE;QACA,OAAO,KAAK,eAAL,CAAqB,WAArB,CAAiC,KAAjC,EAAwC,GAAxC,CAAP;MAGF,IAAI,GAAG,GAAG,KAAV,EACE,MAAM,IAAI,UAAJ,CAAe,gCAAf,CAAN,CAR4C,CAW9C;;MACA,iBAAU,KAAK,MAAL,CAAY,KAAZ,CAAV,qBAAgC,KAAI,MAAJ,CAAS,GAAT,CAAhC;IACD;IAED;;;;WACA,4BAAmB,KAAnB,EAAkC,GAAlC,EAAwE;MACtE;MACA,IAAI,OAAO,KAAK,eAAL,CAAqB,kBAA5B,KAAmD,UAAvD,EACE;QACA,OAAO,KAAK,eAAL,CAAqB,kBAArB,CAAwC,KAAxC,EAA+C,GAA/C,CAAP;MAGF,IAAI,GAAG,GAAG,KAAV,EACE,MAAM,IAAI,UAAJ,CAAe,gCAAf,CAAN;MAGF,IAAI,UAAU,GAAG,KAAK,eAAL,CAAqB,aAArB,CAAmC,KAAnC,CAAjB;MACA,IAAI,QAAQ,GAAG,KAAK,eAAL,CAAqB,aAArB,CAAmC,GAAnC,CAAf;MACA,oCACK,UAAU,CAAC,GAAX,CAAc,UAAC,CAAD;QAAA,uCAAW,CAAX;UAAc,MAAM,EAAE;QAAtB;MAAA,CAAd,CADL,IAEE;QAAC,IAAI,EAAE,SAAP;QAAkB,KAAK,EAAE,KAAzB;QAAgC,MAAM,EAAE;MAAxC,CAFF,sBAGK,QAAQ,CAAC,GAAT,CAAY,UAAC,CAAD;QAAA,uCAAW,CAAX;UAAc,MAAM,EAAE;QAAtB;MAAA,CAAZ,CAHL;IAKD;IAED;;;;WACA,2BAAoD;MAClD,IAAI,OAAO,GAAG,KAAK,eAAL,CAAqB,eAArB,EAAd;MACA,IAAE,CAAG,yCAAH,IAA0B,KAAK,OAAL,CAAa,WAAb,IAA4B,IAAxD,EACE,OAAO,mCAAO,OAAP;QAAgB,WAAW,EAAE,KAAK,OAAL,CAAa;MAA1C,EAAP;MAGF,IAAE,CAAG,kCAAH,IAAmB,KAAK,OAAL,CAAa,KAAb,KAAuB,MAA5C,EACE,OAAO,mCAAO,OAAP;QAAgB,KAAK,EAAE,MAAvB;QAA+B,IAAI,EAAE,KAAK,OAAL,CAAa,IAAlD;QAAwD,WAAW,EAAE,KAAK,OAAL,CAAa;MAAlF,EAAP;MAGF,OAAO,OAAP;IACD;;;;;;SAGM,8C,CAAyB,M,EAAsE;EAAA,IAAtD,OAAsD,uEAAvB,EAAuB;EACtG,eAAwB,OAAxB;EAAA,IAAK,eAAL,YAAK,eAAL;EACA,IAAI,eAAe,IAAI,MAAM,CAAC,OAAP,CAAe,QAAf,MAA6B,CAAA,CAApD,EACE,MAAM,aAAM,MAAN,mBAAqB,eAArB,CAAN;;EAGF,IAAI,OAAO,CAAC,KAAR,KAAkB,MAAlB,IAAwB,CAAK,kCAAjC,EAA+C;QAKxC,G;IAJL,gBAAoC,OAApC;IAAA,IAAK,IAAL,aAAK,IAAL;IAAA,sCAAS,WAAT;IAAA,IAAW,WAAX,sCAAyB,OAAzB;IACA,IAAE,CAAG,IAAL,EACE,MAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;IAEF,IAAE,EAAA,CAAG,GAAW,GAAX,2BAAK,CAAC,IAAD,CAAR,MAAa,IAAb,IAAG,GAAW,KAAX,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,GAAW,CAAG,WAAH,CAAd,CAAF,EACE,MAAM,IAAI,KAAJ,4BAA8B,IAA9B,iCAAyD,WAAzD,EAAN;IAEF,OAAO,mCAAO,OAAP;MAAgB,KAAK,EAAE;IAAvB,EAAP;EACD;;EAED,IAAI,QAAQ,GAAG,MAAM,IAAI,OAAO,GAAG,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,IAAxB,CAA4B,UAAE,CAAF,EAAK,CAAL;IAAA,OAAW,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR,GAAc,CAAA,CAAd,GAAmB,CAA9B;EAAA,CAA5B,EAA6D,IAA7D,EAAH,GAAyE,EAApF,CAArB;EACA,IAAI,oCAAc,CAAC,GAAf,CAAmB,QAAnB,CAAJ,EACE,OAAO,oCAAc,CAAC,GAAf,CAAmB,QAAnB,CAAP;EAGF,IAAI,eAAe,GAAG,IAAI,IAAI,CAAC,YAAT,CAAsB,MAAtB,EAA8B,OAA9B,CAAtB;EACA,oCAAc,CAAC,GAAf,CAAmB,QAAnB,EAA6B,eAA7B;EACA,OAAO,eAAP;AACD;;SAGe,yC,CAAgC,Y,EAAiC,W,EAAqB,G,EAAa;EACjH,IAAI,WAAW,KAAK,MAApB,EACE,OAAO,YAAY,CAAC,MAAb,CAAoB,GAApB,CAAP,CADF,KAEO,IAAI,WAAW,KAAK,OAApB,EACL,OAAO,YAAY,CAAC,MAAb,CAAoB,IAAI,CAAC,GAAL,CAAS,GAAT,CAApB,CAAP,CADK,KAEA;IACL,IAAI,iBAAiB,GAAG,KAAxB;IACA,IAAI,WAAW,KAAK,QAApB,EACE,iBAAiB,GAAG,GAAG,GAAG,CAAN,IAAW,MAAM,CAAC,EAAP,CAAU,GAAV,EAAe,CAAf,CAA/B,CADF,KAEO,IAAI,WAAW,KAAK,YAApB,EAAgC;MACrC,IAAI,MAAM,CAAC,EAAP,CAAU,GAAV,EAAe,CAAA,CAAf,KAAsB,MAAM,CAAC,EAAP,CAAU,GAAV,EAAe,CAAf,CAA1B,EACE,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,CAAN,CADF,KAGE,iBAAiB,GAAG,GAAG,GAAG,CAA1B;;;IAIJ,IAAI,iBAAJ,EAAuB;MACrB,IAAI,QAAQ,GAAG,YAAY,CAAC,MAAb,CAAmB,CAAE,GAArB,CAAf;MACA,IAAI,MAAM,GAAG,YAAY,CAAC,MAAb,CAAoB,GAApB,CAAb,CAFqB,CAGrB;;MACA,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,EAA6B,OAA7B,CAAoC,eAApC,EAAsD,EAAtD,CAAZ;MACA,IAAI,mBAAI,KAAJ,EAAW,MAAX,KAAsB,CAA1B,EACE,OAAO,CAAC,IAAR,CAAa,0EAAb;MAEF,IAAI,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,OAAhC,CAAwC,KAAxC,EAA+C,GAA/C,EAAoD,OAApD,CAA4D,KAA5D,EAAmE,MAAnE,CAAf;MACA,OAAO,QAAP;IACD,CAVD,MAWE,OAAO,YAAY,CAAC,MAAb,CAAoB,GAApB,CAAP;EAEH;AACF;;ACnLD,IAAM,yCAAmB,GAAG,IAAI,MAAJ,CAAW,gBAAX,CAA5B;AACA,IAAM,uCAAiB,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CAA1B;;IAQa,yC;qDAIC,M,EAAwD;IAAA,IAAxC,OAAwC,uEAAJ,EAAI;;IAAA;;IAClE,KAAK,MAAL,GAAc,MAAd;IACA,KAAK,OAAL,GAAe,OAAf;EACD;;;;;IAED;;AAAA;IAGA,eAAM,KAAN,EAA6B;MAC3B,OAAO,yCAAmB,CAAC,KAAK,MAAN,EAAc,KAAK,OAAnB,EAA4B,KAA5B,CAAnB,CAAsD,KAAtD,CAA4D,KAA5D,CAAP;IACD;IAED;;;;AAAA;;;;WAKA,8BAAqB,KAArB,EAAoC,QAApC,EAAuD,QAAvD,EAAmF;MACjF,OAAO,yCAAmB,CAAC,KAAK,MAAN,EAAc,KAAK,OAAnB,EAA4B,KAA5B,CAAnB,CAAsD,oBAAtD,CAA2E,KAA3E,EAAkF,QAAlF,EAA4F,QAA5F,CAAP;IACD;IAED;;;;AAAA;;;;WAKA,4BAAmB,KAAnB,EAA0C;MACxC,OAAO,yCAAmB,CAAC,KAAK,MAAN,EAAc,KAAK,OAAnB,EAA4B,KAA5B,CAAnB,CAAsD,OAAtD,CAA8D,eAArE;IACD;;;;;;AAGH,IAAM,uCAAiB,GAAG,IAAI,GAAJ,EAA1B;;SACS,yC,CAAoB,M,EAAgB,O,EAAmC,K,EAAe;EAC7F;EACA,IAAI,aAAa,GAAG,2CAAqB,CAAC,MAAD,EAAS,OAAT,CAAzC,CAF6F,CAI7F;EACA;;EACA,IAAE,CAAG,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAH,IAAyB,CAAM,aAAa,CAAC,oBAAd,CAAmC,KAAnC,CAAjC,EAA4E;IAAA,2CAC9C,uCAD8C;IAAA;;IAAA;MAC1E,oDACE;QAAA,IADO,eACP;;QAAA,IAAI,eAAe,KAAK,aAAa,CAAC,OAAd,CAAsB,eAA9C,EAA+D;UAC7D,IAAI,MAAM,GAAG,2CAAqB,CAAC,MAAM,IAAI,MAAM,CAAC,QAAP,CAAgB,KAAhB,IAAyB,MAAzB,GAAkC,QAAtC,CAAN,GAAwD,eAAzD,EAA0E,OAA1E,CAAlC;UACA,IAAI,MAAM,CAAC,oBAAP,CAA4B,KAA5B,CAAJ,EACE,OAAO,MAAP;QAEH;MAAA;IAPuE;MAAA;IAAA;MAAA;IAAA;EAS3E;;EAED,OAAO,aAAP;AACD;;SAEQ,2C,CAAsB,M,EAAgB,O,EAAmC;EAChF,IAAI,QAAQ,GAAG,MAAM,IAAI,OAAO,GAAG,MAAM,CAAC,OAAP,CAAe,OAAf,EAAwB,IAAxB,CAA4B,UAAE,CAAF,EAAK,CAAL;IAAA,OAAW,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR,GAAc,CAAA,CAAd,GAAmB,CAA9B;EAAA,CAA5B,EAA6D,IAA7D,EAAH,GAAyE,EAApF,CAArB;EACA,IAAI,MAAM,GAAG,uCAAiB,CAAC,GAAlB,CAAsB,QAAtB,CAAb;;EACA,IAAE,CAAG,MAAL,EAAa;IACX,MAAM,GAAG,IAAI,sCAAJ,CAAqB,MAArB,EAA6B,OAA7B,CAAT;IACA,uCAAiB,CAAC,GAAlB,CAAsB,QAAtB,EAAgC,MAAhC;EACD;;EAED,OAAO,MAAP;AACD,C,CAED;AACA;;;IACM,sC;kDAKQ,M,EAAwD;IAAA,IAAxC,OAAwC,uEAAJ,EAAI;;IAAA;;IAClE,KAAK,SAAL,GAAiB,IAAI,IAAI,CAAC,YAAT,CAAsB,MAAtB,EAA8B,OAA9B,CAAjB;IACA,KAAK,OAAL,GAAe,KAAK,SAAL,CAAe,eAAf,EAAf;IACA,KAAK,OAAL,GAAe,gCAAU,CAAC,KAAK,SAAN,EAAiB,KAAK,OAAtB,EAA+B,OAA/B,CAAzB;EACD;;;;WAED,eAAM,KAAN,EAAqB;MACnB;MACA,IAAI,mBAAmB,GAAG,KAAK,QAAL,CAAc,KAAd,CAA1B,CAFmB,CAInB;;MACA,mBAAmB,GAAG,gCAAU,CAAC,mBAAD,EAAsB,KAAK,OAAL,CAAa,KAAnC,EAA0C,EAA1C,CAAV,CACnB,OADmB,CACX,KAAK,OAAL,CAAa,OADF,EACW,GADX,EAEnB,OAFmB,CAEX,KAAK,OAAL,CAAa,SAFF,EAEa,GAFb,EAGnB,OAHmB,CAGX,KAAK,OAAL,CAAa,OAHF,EAGW,KAAK,OAAL,CAAa,KAHxB,CAAtB;MAKA,IAAI,QAAQ,GAAG,mBAAmB,GAAA,CAAI,mBAAJ,GAA0B,GAA5D;MACA,IAAI,KAAK,CAAC,QAAD,CAAT,EACE,OAAO,GAAP,CAZiB,CAenB;;MACA,IAAI,KAAK,OAAL,CAAa,YAAb,KAA8B,YAA9B,IAA8C,yCAAmB,CAAC,IAApB,CAAyB,KAAzB,CAAlD,EACE,QAAQ,GAAG,CAAA,CAAA,GAAK,QAAhB,CAjBiB,CAoBnB;;MACA,IAAI,KAAK,OAAL,CAAa,KAAb,KAAuB,SAA3B,EAAsC;QACpC,QAAQ,IAAI,GAAZ;;YAE8B,sB,CAHM,CAEpC;;;QACA,QAAQ,GAAA,CAAI,QAAQ,CAAC,OAAT,CAAgB,CAAA,CAAE,sBAAkC,GAAlC,KAAK,OAAL,CAAa,qBAAf,MAAoC,IAApC,IAAE,sBAAkC,KAAA,KAAA,CAApC,GAAE,sBAAF,GAAwC,CAAxC,IAA6C,CAA7D,CAAZ;MACD;;MAED,OAAO,QAAP;IACD;;;WAED,kBAAS,KAAT,EAAwB;MACtB;MACA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,KAAK,OAAL,CAAa,QAA3B,EAAqC,EAArC,CAAR,CAFsB,CAItB;MACA;;MACA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB,KAAK,OAAL,CAAa,SAAhC,CAAR,CANsB,CAQtB;MACA;;MACA,IAAI,KAAK,OAAL,CAAa,eAAb,KAAiC,MAArC,EAA6C;QAC3C,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB,KAAK,OAAL,CAAa,OAAhC,CAAR;QACA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAd,EAAyC,KAAK,OAAL,CAAa,OAAtD,CAAR;QACA,KAAK,GAAG,gCAAU,CAAC,KAAD,EAAQ,GAAR,EAAa,KAAK,OAAL,CAAa,KAA1B,CAAlB;MACD,CAdqB,CAgBtB;MACA;;;MACA,IAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,OAA5B,EACE,KAAK,GAAG,gCAAU,CAAC,KAAD,EAAQ,GAAR,EAAa,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAb,CAAlB;MAGF,OAAO,KAAP;IACD;;;WAED,8BAAqB,KAArB,EAAwG;MAAA,IAApE,QAAoE,uEAApD,CAAI,QAAgD;MAAA,IAAtC,QAAsC,uEAAnB,QAAmB;MACtG,KAAK,GAAG,KAAK,QAAL,CAAc,KAAd,CAAR,CADsG,CAGtG;;MACA,IAAI,KAAK,CAAC,UAAN,CAAiB,KAAK,OAAL,CAAa,SAA9B,KAA4C,QAAQ,GAAG,CAA3D,EACE,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,OAAL,CAAa,SAAb,CAAuB,MAAnC,CAAR,CADF,KAEO,IAAI,KAAK,OAAL,CAAa,QAAb,IAAyB,KAAK,CAAC,UAAN,CAAiB,KAAK,OAAL,CAAa,QAA9B,CAAzB,IAAoE,QAAQ,GAAG,CAAnF,EACL,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,KAAK,OAAL,CAAa,QAAb,CAAsB,MAAlC,CAAR,CAPoG,CAUtG;;MACA,IAAI,KAAK,CAAC,UAAN,CAAiB,KAAK,OAAL,CAAa,KAA9B,CAAJ,EACE,OAAO,KAAP,CAZoG,CAetG;;MACA,KAAK,GAAG,gCAAU,CAAC,KAAD,EAAQ,KAAK,OAAL,CAAa,KAArB,EAA4B,EAA5B,CAAV,CACL,OADK,CACG,KAAK,OAAL,CAAa,OADhB,EACyB,EADzB,EAEL,OAFK,CAEG,KAAK,OAAL,CAAa,OAFhB,EAEyB,EAFzB,CAAR,CAhBsG,CAoBtG;;MACA,OAAO,KAAK,CAAC,MAAN,KAAiB,CAAxB;IACD;;;;;;AAGH,IAAM,qCAAe,GAAG,IAAI,GAAJ,CAAQ,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,UAAhD,EAA4D,OAA5D,CAAR,CAAxB;;SAES,gC,CAAW,S,EAA8B,W,EAA+C,e,EAAoD;MAMnI,G,EACD,I,EASD,I,EACF,I,CAjBuI,CACnJ;;EACA,IAAI,QAAQ,GAAG,SAAS,CAAC,aAAV,CAAwB,CAAA,SAAxB,CAAf;EACA,IAAI,WAAW,GAAG,SAAS,CAAC,aAAV,CAAwB,SAAxB,CAAlB;EACA,IAAI,aAAa,GAAG,SAAS,CAAC,aAAV,CAAwB,CAAxB,CAApB;MAEgB,I;EAAhB,IAAI,SAAS,GAAA,CAAG,IAAiD,GAAA,CAAjD,GAA0C,GAA1C,QAAQ,CAAC,IAAT,CAAa,UAAC,CAAD;IAAA,OAAM,CAAC,CAAC,IAAF,KAAW,WAAjB;EAAA,CAAb,CAAiD,M,IAAA,IAAjD,GAA0C,KAA1C,KAAA,CAAiD,GAAjD,KAAA,CAAiD,GAAjD,GAA0C,CAAE,KAA/C,MAAoD,IAApD,IAAG,IAAiD,KAAA,KAAA,CAApD,GAAG,IAAH,GAAwD,GAArE;EACA,IAAI,QAAQ,GAAA,CAAG,IAA4C,GAA5C,WAAW,CAAC,IAAZ,CAAgB,UAAC,CAAD;IAAA,OAAM,CAAC,CAAC,IAAF,KAAW,UAAjB;EAAA,CAAhB,CAAH,M,IAAA,IAAG,IAA4C,KAA5C,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,IAA4C,CAAE,KAA7D,CAPmJ,CASnJ;EACA;EACA;;EACA,IAAE,CAAG,QAAH,KAAW,CAAK,eAAe,KAAA,IAAf,IAAA,eAAe,KAAf,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAe,CAAE,WAAtB,MAAsC,YAAtC,IAAkD,CAAI,eAAe,KAAA,IAAf,IAAA,eAAe,KAAf,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAe,CAAE,WAArB,MAAqC,QAAlG,CAAF,EACE,QAAQ,GAAG,GAAX;EAGF,IAAI,OAAO,GAAA,CAAG,IAAwC,GAAxC,QAAQ,CAAC,IAAT,CAAa,UAAC,CAAD;IAAA,OAAM,CAAC,CAAC,IAAF,KAAW,SAAjB;EAAA,CAAb,CAAH,M,IAAA,IAAG,IAAwC,KAAxC,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,IAAwC,CAAE,KAAxD;EACA,IAAI,KAAK,GAAA,CAAG,IAAsC,GAAtC,QAAQ,CAAC,IAAT,CAAa,UAAC,CAAD;IAAA,OAAM,CAAC,CAAC,IAAF,KAAW,OAAjB;EAAA,CAAb,CAAH,M,IAAA,IAAG,IAAsC,KAAtC,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,IAAsC,CAAE,KAApD,CAjBmJ,CAmBnJ;EACA;;EACA,IAAI,cAAc,GAAG,QAAQ,CAAC,MAAT,CAAe,UAAC,CAAD;IAAA,OAAE,CAAK,qCAAe,CAAC,GAAhB,CAAoB,CAAC,CAAC,IAAtB,CAAP;EAAA,CAAf,EAAmD,GAAnD,CAAsD,UAAC,CAAD;IAAA,OAAM,iCAAW,CAAC,CAAC,CAAC,KAAH,CAAjB;EAAA,CAAtD,CAArB;EACA,IAAI,gBAAgB,GAAG,aAAa,CAAC,MAAd,CAAoB,UAAC,CAAD;IAAA,OAAE,CAAK,qCAAe,CAAC,GAAhB,CAAoB,CAAC,CAAC,IAAtB,CAAP;EAAA,CAApB,EAAwD,GAAxD,CAA2D,UAAC,CAAD;IAAA,OAAM,iCAAW,CAAC,CAAC,CAAC,KAAH,CAAjB;EAAA,CAA3D,CAAvB;;EACA,IAAI,cAAc,GAAG,mBAAI,IAAI,GAAJ,8BAAY,gBAAZ,sBAAiC,cAAjC,GAAJ,EAAuD,IAAvD,CAA2D,UAAE,CAAF,EAAK,CAAL;IAAA,OAAW,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAAxB;EAAA,CAA3D,CAArB;;EACA,IAAI,QAAQ,GAAG,IAAI,MAAJ,WAAc,cAAc,CAAC,IAAf,CAAoB,GAApB,CAAd,0BAA6D,IAA7D,CAAf,CAxBmJ,CA0BnJ;;EACA,IAAI,QAAQ,GAAG,mBAAI,IAAI,IAAI,CAAC,YAAT,CAAsB,WAAW,CAAC,MAAlC,EAA0C;IAAC,WAAW,EAAE;EAAd,CAA1C,EAAgE,MAAhE,CAAuE,UAAvE,CAAJ,EAAwF,OAAxF,EAAf;;EACA,IAAI,OAAO,GAAG,IAAI,GAAJ,CAAQ,QAAQ,CAAC,GAAT,CAAY,UAAE,CAAF,EAAK,CAAL;IAAA,OAAW,CAAC,CAAD,EAAI,CAAJ,CAAX;EAAA,CAAZ,CAAR,CAAd;EACA,IAAI,OAAO,GAAG,IAAI,MAAJ,YAAe,QAAQ,CAAC,IAAT,CAAc,EAAd,CAAf,QAAqC,GAArC,CAAd;;EACA,IAAI,KAAK,GAAA,SAAL,KAAK,CAAG,CAAH;IAAA,OAAQ,MAAM,CAAC,OAAO,CAAC,GAAR,CAAY,CAAZ,CAAD,CAAd;EAAA,CAAT;;EAEA,OAAO;eAAC,SAAD;cAAY,QAAZ;aAAsB,OAAtB;WAA+B,KAA/B;cAAsC,QAAtC;aAAgD,OAAhD;WAAyD;EAAzD,CAAP;AACD;;SAEQ,gC,CAAW,G,EAAa,I,EAAc,O,EAAiB;EAC9D;EACA,IAAI,GAAG,CAAC,UAAR,EACE;IACA,OAAO,GAAG,CAAC,UAAJ,CAAe,IAAf,EAAqB,OAArB,CAAP;EAGF,OAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,IAAhB,CAAqB,OAArB,CAAP;AACD;;SAEQ,iC,CAAY,M,EAAgB;EACnC,OAAO,MAAM,CAAC,OAAP,CAAc,uBAAd,EAAwC,MAAxC,CAAP;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"]},"metadata":{},"sourceType":"module"}