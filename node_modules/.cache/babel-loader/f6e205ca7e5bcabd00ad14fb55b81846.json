{"ast":null,"code":"import _objectSpread from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport $1BfjW$react, { useMemo as $1BfjW$useMemo } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $4a0dd036d492cee4$exports = {};\n$parcel$export($4a0dd036d492cee4$exports, \"useTableState\", function () {\n  return $4a0dd036d492cee4$export$907bcc6c48325fd6;\n});\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  var columns = [];\n  var seen = new Map();\n\n  var _iterator = _createForOfIteratorHelper(columnNodes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var column = _step.value;\n      var parentKey = column.parentKey;\n      var col = [column];\n\n      while (parentKey) {\n        var parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n        // with a previous column. If the current column is taller\n        // than the previous column, than we need to shift the parent\n        // in the previous column so it's level with the current column.\n\n        if (seen.has(parent)) {\n          parent.colspan++;\n\n          var _seen$get = seen.get(parent),\n              _column = _seen$get.column,\n              index = _seen$get.index;\n\n          if (index > col.length) break;\n\n          for (var _i3 = index; _i3 < col.length; _i3++) {\n            _column.splice(_i3, 0, null);\n          } // Adjust shifted indices\n\n\n          for (var i1 = col.length; i1 < _column.length; i1++) {\n            if (_column[i1] && seen.has(_column[i1])) seen.get(_column[i1]).index = i1;\n          }\n        } else {\n          parent.colspan = 1;\n          col.push(parent);\n          seen.set(parent, {\n            column: col,\n            index: col.length - 1\n          });\n        }\n\n        parentKey = parent.parentKey;\n      }\n\n      columns.push(col);\n      column.index = columns.length - 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  }); // Convert columns into rows.\n\n  var colIndex = 0;\n\n  for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n    var column1 = _columns[_i];\n\n    var _i2 = maxLength - 1;\n\n    var _iterator2 = _createForOfIteratorHelper(column1),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n\n        if (item) {\n          // Fill the space up until the current column with a placeholder\n          var row = headerRows[_i2];\n          var rowLength = row.reduce(function (p, c) {\n            return p + c.colspan;\n          }, 0);\n\n          if (rowLength < colIndex) {\n            var placeholder = {\n              type: 'placeholder',\n              key: 'placeholder-' + item.key,\n              colspan: colIndex - rowLength,\n              index: rowLength,\n              value: null,\n              rendered: null,\n              level: _i2,\n              hasChildNodes: false,\n              childNodes: [],\n              textValue: null\n            };\n\n            if (row.length > 0) {\n              row[row.length - 1].nextKey = placeholder.key;\n              placeholder.prevKey = row[row.length - 1].key;\n            }\n\n            row.push(placeholder);\n          }\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = item.key;\n            item.prevKey = row[row.length - 1].key;\n          }\n\n          item.level = _i2;\n          item.index = colIndex;\n          row.push(item);\n        }\n\n        _i2--;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  var i = 0;\n\n  var _iterator3 = _createForOfIteratorHelper(headerRows),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var row1 = _step3.value;\n\n      var _rowLength = row1.reduce(function (p, c) {\n        return p + c.colspan;\n      }, 0);\n\n      if (_rowLength < columnNodes.length) {\n        var _placeholder = {\n          type: 'placeholder',\n          key: 'placeholder-' + row1[row1.length - 1].key,\n          colspan: columnNodes.length - _rowLength,\n          index: _rowLength,\n          value: null,\n          rendered: null,\n          level: i,\n          hasChildNodes: false,\n          childNodes: [],\n          textValue: null,\n          prevKey: row1[row1.length - 1].key\n        };\n        row1.push(_placeholder);\n      }\n\n      i++;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nvar $788781baa30117fa$export$596e1b2e2cf93690 = /*#__PURE__*/function (_$1BfjW$GridCollectio) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _$1BfjW$GridCollectio);\n\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this;\n\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    var rows = [];\n    var columnKeyMap = new Map();\n\n    var visit = function visit(node) {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(node.childNodes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n          visit(child);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    };\n\n    var _iterator5 = _createForOfIteratorHelper(nodes),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var node1 = _step5.value;\n        visit(node1);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    var headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this.columns = columns;\n    _this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this.body = body;\n    _this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (_this.rowHeaderColumnKeys.size === 0) _this.rowHeaderColumnKeys.add(_this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n    return _this;\n  }\n\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: tmp,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.body.childNodes).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.body.childNodes)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n\n      var rows = _toConsumableArray(this.body.childNodes);\n\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}($1BfjW$GridCollection);\n\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode;\n  var context = $1BfjW$useMemo(function () {\n    return {\n      showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, props.showSelectionCheckboxes, selectionMode]);\n  var collection = $1BfjW$useCollection(props, function (nodes, prev) {\n    return new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context);\n  }, context);\n\n  var _$1BfjW$useGridState = $1BfjW$useGridState(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  })),\n      disabledKeys = _$1BfjW$useGridState.disabledKeys,\n      selectionManager = _$1BfjW$useGridState.selectionManager;\n\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort: function sort(columnKey) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n  };\n}\n\nvar $312ae3b56a94a86e$exports = {};\n$parcel$export($312ae3b56a94a86e$exports, \"TableHeader\", function () {\n  return $312ae3b56a94a86e$export$f850895b287ef28e;\n});\n\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, columns, _iterator6, _step6, column, _columns2;\n\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          children = props.children, columns = props.columns;\n\n          if (!(typeof children === 'function')) {\n            _context2.next = 23;\n            break;\n          }\n\n          if (columns) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new Error('props.children was a function but props.columns is missing');\n\n        case 4:\n          _iterator6 = _createForOfIteratorHelper(columns);\n          _context2.prev = 5;\n\n          _iterator6.s();\n\n        case 7:\n          if ((_step6 = _iterator6.n()).done) {\n            _context2.next = 13;\n            break;\n          }\n\n          column = _step6.value;\n          _context2.next = 11;\n          return {\n            type: 'column',\n            value: column,\n            renderer: children\n          };\n\n        case 11:\n          _context2.next = 7;\n          break;\n\n        case 13:\n          _context2.next = 18;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](5);\n\n          _iterator6.e(_context2.t0);\n\n        case 18:\n          _context2.prev = 18;\n\n          _iterator6.f();\n\n          return _context2.finish(18);\n\n        case 21:\n          _context2.next = 26;\n          break;\n\n        case 23:\n          _columns2 = [];\n          $1BfjW$react.Children.forEach(children, function (column) {\n            _columns2.push({\n              type: 'column',\n              element: column\n            });\n          });\n          return _context2.delegateYield(_columns2, \"t1\", 26);\n\n        case 26:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, getCollectionNode, null, [[5, 15, 18, 21]]);\n});\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\nvar $4ae5314bf50db1a3$exports = {};\n$parcel$export($4ae5314bf50db1a3$exports, \"TableBody\", function () {\n  return $4ae5314bf50db1a3$export$76ccd210b9029917;\n});\n\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, items1;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          children = props.children, items1 = props.items;\n          _context4.next = 3;\n          return {\n            type: 'body',\n            hasChildNodes: true,\n            props: props,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator7, _step7, item, items;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      if (!(typeof children === 'function')) {\n                        _context3.next = 22;\n                        break;\n                      }\n\n                      if (items1) {\n                        _context3.next = 3;\n                        break;\n                      }\n\n                      throw new Error('props.children was a function but props.items is missing');\n\n                    case 3:\n                      _iterator7 = _createForOfIteratorHelper(items1);\n                      _context3.prev = 4;\n\n                      _iterator7.s();\n\n                    case 6:\n                      if ((_step7 = _iterator7.n()).done) {\n                        _context3.next = 12;\n                        break;\n                      }\n\n                      item = _step7.value;\n                      _context3.next = 10;\n                      return {\n                        type: 'item',\n                        value: item,\n                        renderer: children\n                      };\n\n                    case 10:\n                      _context3.next = 6;\n                      break;\n\n                    case 12:\n                      _context3.next = 17;\n                      break;\n\n                    case 14:\n                      _context3.prev = 14;\n                      _context3.t0 = _context3[\"catch\"](4);\n\n                      _iterator7.e(_context3.t0);\n\n                    case 17:\n                      _context3.prev = 17;\n\n                      _iterator7.f();\n\n                      return _context3.finish(17);\n\n                    case 20:\n                      _context3.next = 25;\n                      break;\n\n                    case 22:\n                      items = [];\n                      $1BfjW$react.Children.forEach(children, function (item) {\n                        items.push({\n                          type: 'item',\n                          element: item\n                        });\n                      });\n                      return _context3.delegateYield(items, \"t1\", 25);\n\n                    case 25:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, childNodes, null, [[4, 14, 17, 20]]);\n            })\n          };\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\nvar $1cd244557c2f97d5$exports = {};\n$parcel$export($1cd244557c2f97d5$exports, \"Column\", function () {\n  return $1cd244557c2f97d5$export$816b5d811295e6bc;\n});\n\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n\n$1cd244557c2f97d5$var$Column.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context1) {\n  var title, children, childColumns1, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          title = props.title, children = props.children, childColumns1 = props.childColumns;\n          rendered = title || children;\n          textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n          _context6.next = 5;\n          return {\n            type: 'column',\n            hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n            rendered: rendered,\n            textValue: textValue,\n            props: props,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator8, _step8, child1, childColumns;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      if (!childColumns1) {\n                        _context5.next = 20;\n                        break;\n                      }\n\n                      _iterator8 = _createForOfIteratorHelper(childColumns1);\n                      _context5.prev = 2;\n\n                      _iterator8.s();\n\n                    case 4:\n                      if ((_step8 = _iterator8.n()).done) {\n                        _context5.next = 10;\n                        break;\n                      }\n\n                      child1 = _step8.value;\n                      _context5.next = 8;\n                      return {\n                        type: 'column',\n                        value: child1\n                      };\n\n                    case 8:\n                      _context5.next = 4;\n                      break;\n\n                    case 10:\n                      _context5.next = 15;\n                      break;\n\n                    case 12:\n                      _context5.prev = 12;\n                      _context5.t0 = _context5[\"catch\"](2);\n\n                      _iterator8.e(_context5.t0);\n\n                    case 15:\n                      _context5.prev = 15;\n\n                      _iterator8.f();\n\n                      return _context5.finish(15);\n\n                    case 18:\n                      _context5.next = 24;\n                      break;\n\n                    case 20:\n                      if (!title) {\n                        _context5.next = 24;\n                        break;\n                      }\n\n                      childColumns = [];\n                      $1BfjW$react.Children.forEach(children, function (child) {\n                        childColumns.push({\n                          type: 'column',\n                          element: child\n                        });\n                      });\n                      return _context5.delegateYield(childColumns, \"t1\", 24);\n\n                    case 24:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, childNodes, null, [[2, 12, 15, 18]]);\n            }),\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              // This is a bit of a hack, but it works.\n              // If this method is called, then there's a cached version of this node available.\n              // But, we need to keep the list of columns in the new context up to date.\n              updateContext(newContext);\n              return false;\n            }\n          };\n\n        case 5:\n          fullNodes = _context6.sent;\n\n          updateContext = function updateContext(context) {\n            // register leaf columns on the context so that <Row> can access them\n            var _iterator9 = _createForOfIteratorHelper(fullNodes),\n                _step9;\n\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var node = _step9.value;\n                if (!node.hasChildNodes) context.columns.push(node);\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n          };\n\n          updateContext(context1);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\nvar $70d70eb16ea48428$exports = {};\n$parcel$export($70d70eb16ea48428$exports, \"Row\", function () {\n  return $70d70eb16ea48428$export$b59bdbef9ce70de2;\n});\n\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n\n$70d70eb16ea48428$var$Row.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          children = props.children, textValue = props.textValue;\n          _context8.next = 3;\n          return {\n            type: 'item',\n            props: props,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: true,\n            childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n              var _iterator10, _step10, column, cells;\n\n              return _regeneratorRuntime().wrap(function childNodes$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      if (!(context.showSelectionCheckboxes && context.selectionMode !== 'none')) {\n                        _context7.next = 3;\n                        break;\n                      }\n\n                      _context7.next = 3;\n                      return {\n                        type: 'cell',\n                        key: 'header',\n                        props: {\n                          isSelectionCell: true\n                        }\n                      };\n\n                    case 3:\n                      if (!(typeof children === 'function')) {\n                        _context7.next = 23;\n                        break;\n                      }\n\n                      _iterator10 = _createForOfIteratorHelper(context.columns);\n                      _context7.prev = 5;\n\n                      _iterator10.s();\n\n                    case 7:\n                      if ((_step10 = _iterator10.n()).done) {\n                        _context7.next = 13;\n                        break;\n                      }\n\n                      column = _step10.value;\n                      _context7.next = 11;\n                      return {\n                        type: 'cell',\n                        element: children(column.key),\n                        key: column.key // this is combined with the row key by CollectionBuilder\n\n                      };\n\n                    case 11:\n                      _context7.next = 7;\n                      break;\n\n                    case 13:\n                      _context7.next = 18;\n                      break;\n\n                    case 15:\n                      _context7.prev = 15;\n                      _context7.t0 = _context7[\"catch\"](5);\n\n                      _iterator10.e(_context7.t0);\n\n                    case 18:\n                      _context7.prev = 18;\n\n                      _iterator10.f();\n\n                      return _context7.finish(18);\n\n                    case 21:\n                      _context7.next = 28;\n                      break;\n\n                    case 23:\n                      cells = [];\n                      $1BfjW$react.Children.forEach(children, function (cell) {\n                        cells.push({\n                          type: 'cell',\n                          element: cell\n                        });\n                      });\n\n                      if (!(cells.length !== context.columns.length)) {\n                        _context7.next = 27;\n                        break;\n                      }\n\n                      throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n\n                    case 27:\n                      return _context7.delegateYield(cells, \"t1\", 28);\n\n                    case 28:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, childNodes, null, [[5, 15, 18, 21]]);\n            }),\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              // Invalidate all rows if the columns changed.\n              return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n                return c.key !== context.columns[i].key;\n              }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n            }\n          };\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nvar $941d1d9a6a28982a$exports = {};\n$parcel$export($941d1d9a6a28982a$exports, \"Cell\", function () {\n  return $941d1d9a6a28982a$export$f6f0c3fe4ec306ea;\n});\n\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n\n$941d1d9a6a28982a$var$Cell.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          children = props.children;\n          textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n          _context9.next = 4;\n          return {\n            type: 'cell',\n            props: props,\n            rendered: children,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: false\n          };\n\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, getCollectionNode);\n});\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $6555104ff085bef4$re_export$Section as Section, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell };","map":{"version":3,"sources":["packages/@react-stately/table/src/useTableState.ts","packages/@react-stately/table/src/TableCollection.ts","packages/@react-stately/table/src/TableHeader.ts","packages/@react-stately/table/src/TableBody.ts","packages/@react-stately/table/src/Column.ts","packages/@react-stately/table/src/Row.ts","packages/@react-stately/table/src/Cell.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key): void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T>  {\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey: Key) {\n      props.onSortChange({\n        column: columnKey,\n        direction: props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending'\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}