{"ast":null,"code":"import _objectSpread from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useSlotId as $m1DSs$useSlotId, filterDOMProps as $m1DSs$filterDOMProps } from \"@react-aria/utils\";\nimport { focusSafely as $m1DSs$focusSafely } from \"@react-aria/focus\";\nimport { useEffect as $m1DSs$useEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $40df3f8667284809$exports = {};\n$parcel$export($40df3f8667284809$exports, \"useDialog\", function () {\n  return $40df3f8667284809$export$d55e7ee900f34e93;\n});\n\nfunction $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {\n  var _props$role = props.role,\n      role = _props$role === void 0 ? 'dialog' : _props$role;\n  var titleId = $m1DSs$useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.\n\n  $m1DSs$useEffect(function () {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      $m1DSs$focusSafely(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n\n      var timeout = setTimeout(function () {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          $m1DSs$focusSafely(ref.current);\n        }\n      }, 500);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n\n  return {\n    dialogProps: _objectSpread(_objectSpread({}, $m1DSs$filterDOMProps(props, {\n      labelable: true\n    })), {}, {\n      role: role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    }),\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n\nexport { $40df3f8667284809$export$d55e7ee900f34e93 as useDialog };","map":{"version":3,"sources":["packages/@react-aria/dialog/src/useDialog.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;SA6BgB,yC,CAAU,K,EAAwB,G,EAAyC;EACzF,kBAAwB,KAAxB,CAAK,IAAL;EAAA,IAAK,IAAL,4BAAY,QAAZ;EACA,IAAI,OAAO,GAAG,gBAAS,EAAvB;EACA,OAAO,GAAG,KAAK,CAAC,YAAD,CAAL,GAAsB,SAAtB,GAAkC,OAA5C,CAHyF,CAKzF;;EACA,gBAAS,CAAA,YAAO;IACd,IAAI,GAAG,CAAC,OAAJ,IAAW,CAAK,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAqB,QAAQ,CAAC,aAA9B,CAApB,EAAkE;MAChE,kBAAW,CAAC,GAAG,CAAC,OAAL,CAAX,CADgE,CAGhE;MACA;MACA;;MACA,IAAI,OAAO,GAAG,UAAU,CAAA,YAAO;QAC7B,IAAI,QAAQ,CAAC,aAAT,KAA2B,GAAG,CAAC,OAAnC,EAA4C;UAC1C,GAAG,CAAC,OAAJ,CAAY,IAAZ;UACA,kBAAW,CAAC,GAAG,CAAC,OAAL,CAAX;QACD;MACF,CALuB,EAKrB,GALqB,CAAxB;MAOA,OAAM,YAAO;QACX,YAAY,CAAC,OAAD,CAAZ;MACD,CAFD;IAGD;EACF,CAlBQ,EAkBN,CAAC,GAAD,CAlBM,CAAT,CANyF,CA0BzF;EACA;EACA;EACA;EACA;;EACA,OAAO;IACL,WAAW,kCACN,qBAAc,CAAC,KAAD,EAAQ;MAAC,SAAS,EAAE;IAAZ,CAAR,CADR;YAET,IAFS;MAGT,QAAQ,EAAE,CAAA,CAHD;MAIT,mBAAmB,KAAK,CAAC,iBAAD,CAAL,IAA4B;IAJtC,EADN;IAOL,UAAU,EAAE;MACV,EAAE,EAAE;IADM;EAPP,CAAP;AAWD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\n\ninterface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the dialog title element. */\n  titleProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<HTMLElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusSafely(ref.current);\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}