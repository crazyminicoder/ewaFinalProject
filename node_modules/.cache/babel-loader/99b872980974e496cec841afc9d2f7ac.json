{"ast":null,"code":"import _objectSpread from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/fateenahmed/Documents/IIT/Sem3/webapps/Project-II/alacart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport $1DoQa$intlmessageformat from \"intl-messageformat\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $d6fd23bc337660df$exports = {};\n$parcel$export($d6fd23bc337660df$exports, \"MessageDictionary\", function () {\n  return $d6fd23bc337660df$export$64839e615120df17;\n});\n\nvar $d6fd23bc337660df$export$64839e615120df17 = /*#__PURE__*/function () {\n  function $d6fd23bc337660df$export$64839e615120df17(messages) {\n    var defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n\n    _classCallCheck(this, $d6fd23bc337660df$export$64839e615120df17);\n\n    // Clone messages so we don't modify the original object.\n    this.messages = _objectSpread({}, messages);\n    this.defaultLocale = defaultLocale;\n  }\n\n  _createClass($d6fd23bc337660df$export$64839e615120df17, [{\n    key: \"getStringForLocale\",\n    value: function getStringForLocale(key, locale) {\n      var strings = this.messages[locale];\n\n      if (!strings) {\n        strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n        this.messages[locale] = strings;\n      }\n\n      var string = strings[key];\n      if (!string) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(locale, \" locale\"));\n      return string;\n    }\n  }]);\n\n  return $d6fd23bc337660df$export$64839e615120df17;\n}();\n\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  var defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  var language = $d6fd23bc337660df$var$getLanguage(locale);\n\n  for (var key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\n\nvar $972eb555d604f491$exports = {};\n$parcel$export($972eb555d604f491$exports, \"MessageFormatter\", function () {\n  return $972eb555d604f491$export$526ebc05ff964723;\n});\n\nvar $972eb555d604f491$export$526ebc05ff964723 = /*#__PURE__*/function () {\n  function $972eb555d604f491$export$526ebc05ff964723(locale, messages) {\n    _classCallCheck(this, $972eb555d604f491$export$526ebc05ff964723);\n\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  _createClass($972eb555d604f491$export$526ebc05ff964723, [{\n    key: \"format\",\n    value: function format(key, variables) {\n      var message = this.cache[key];\n\n      if (!message) {\n        var msg = this.messages.getStringForLocale(key, this.locale);\n        if (!msg) throw new Error(\"Could not find intl message \".concat(key, \" in \").concat(this.locale, \" locale\"));\n        message = new $1DoQa$intlmessageformat(msg, this.locale);\n        this.cache[key] = message;\n      }\n\n      var varCopy;\n      if (variables) varCopy = Object.keys(variables).reduce(function (acc, key) {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n      return message.format(varCopy);\n    }\n  }]);\n\n  return $972eb555d604f491$export$526ebc05ff964723;\n}();\n\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"sources":["packages/@internationalized/message/src/MessageDictionary.ts","packages/@internationalized/message/src/MessageFormatter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;IAsBa,yC;qDAIC,Q,EAA6D;IAAA,IAAjC,aAAiC,uEAAT,OAAS;;IAAA;;IACvE;IACA,KAAK,QAAL,qBAAoB,QAApB;IACA,KAAK,aAAL,GAAqB,aAArB;EACD;;;;WAED,4BAAmB,GAAnB,EAAgC,MAAhC,EAAgD;MAC9C,IAAI,OAAO,GAAG,KAAK,QAAL,CAAc,MAAd,CAAd;;MACA,IAAE,CAAG,OAAL,EAAc;QACZ,OAAO,GAAG,yCAAmB,CAAC,MAAD,EAAS,KAAK,QAAd,EAAwB,KAAK,aAA7B,CAA7B;QACA,KAAK,QAAL,CAAc,MAAd,IAAwB,OAAxB;MACD;;MAED,IAAI,MAAM,GAAG,OAAO,CAAC,GAAD,CAApB;MACA,IAAE,CAAG,MAAL,EACE,MAAM,IAAI,KAAJ,uCAAyC,GAAzC,iBAAmD,MAAnD,aAAN;MAGF,OAAO,MAAP;IACD;;;;;;SAGM,yC,CAAoB,M,EAAgB,O,EAAoD;EAAA,IAAzB,aAAyB,uEAAT,OAAS;EAC/F;EACA,IAAI,OAAO,CAAC,MAAD,CAAX,EACE,OAAO,OAAO,CAAC,MAAD,CAAd,CAH6F,CAM/F;EACA;EACA;EACA;EACA;;EACA,IAAI,QAAQ,GAAG,iCAAW,CAAC,MAAD,CAA1B;;EACA,KAAK,IAAI,GAAT,IAAgB,OAAhB,EAAyB;IACvB,IAAI,GAAG,CAAC,UAAJ,CAAe,QAAQ,GAAG,GAA1B,CAAJ,EACE,OAAO,OAAO,CAAC,GAAD,CAAd;EAEH,CAhB8F,CAkB/F;;;EACA,OAAO,OAAO,CAAC,aAAD,CAAd;AACD;;SAEQ,iC,CAAY,M,EAAgB;EACnC;EACA,IAAI,IAAI,CAAC,MAAT,EACE;IACA,OAAO,IAAI,IAAI,CAAC,MAAT,CAAgB,MAAhB,EAAwB,QAA/B;EAGF,OAAO,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAP;AACD;;;;;;;IC3DY,yC;qDAKC,M,EAAgB,Q,EAA6B;IAAA;;IACvD,KAAK,MAAL,GAAc,MAAd;IACA,KAAK,QAAL,GAAgB,QAAhB;IACA,KAAK,KAAL,GAAa,EAAb;EACD;;;;WAED,gBAAiB,GAAjB,EAA8B,SAA9B,EAA6I;MAC3I,IAAI,OAAO,GAAG,KAAK,KAAL,CAAW,GAAX,CAAd;;MACA,IAAE,CAAG,OAAL,EAAc;QACZ,IAAI,GAAG,GAAG,KAAK,QAAL,CAAc,kBAAd,CAAiC,GAAjC,EAAsC,KAAK,MAA3C,CAAV;QACA,IAAE,CAAG,GAAL,EACE,MAAM,IAAI,KAAJ,uCAAyC,GAAzC,iBAAmD,KAAK,MAAxD,aAAN;QAGF,OAAO,GAAG,IAAI,wBAAJ,CAAsB,GAAtB,EAA2B,KAAK,MAAhC,CAAV;QACA,KAAK,KAAL,CAAW,GAAX,IAAkB,OAAlB;MACD;;MACD,IAAI,OAAJ;MACA,IAAI,SAAJ,EACE,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,MAAvB,CAA6B,UAAE,GAAF,EAAO,GAAP,EAAe;QACpD,GAAG,CAAC,GAAD,CAAH,GAAW,SAAS,CAAC,GAAD,CAAT,IAAkB,IAAlB,GAAyB,KAAzB,GAAiC,SAAS,CAAC,GAAD,CAArD;QACA,OAAO,GAAP;MACD,CAHS,EAGP,EAHO,CAAV;MAMF,OAAO,OAAO,CAAC,MAAR,CAAe,OAAf,CAAP;IACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}